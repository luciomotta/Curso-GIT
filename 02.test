# 1. Iniciar um repositório Git local
git init

# 2. Clonar um repositório existente
git clone <URL_DO_REPOSITORIO>

# 3. Verificar o status do repositório
git status

# 4. Adicionar arquivos para commit
git add .

# 5. Fazer um commit com mensagem
git commit -m "Descrição das mudanças"

# 6. Enviar mudanças para o repositório remoto
git push origin <nome_da_branch>

# 7. Puxar as últimas mudanças do repositório remoto
git pull origin <nome_da_branch>


-1º add ao Gitigone e depois ADD o arquivo e notara que não está monitorada pelo GIT 
(Sendo ignorado pelo GIT usando o Gitigone)


Voltar todos os COMMITS antes do PUSH 
    GIT reset --hard origin/master (Retorna a pasta local a ultimo PULL)

GIT branch (Lista os branches do REP. atual)
Criar branches : git branche Criando_ela

Git branch -d ou --delete Criando_ela (Quando foi criado errado...)
-----------------Git checkout <branch> Mudar de branches ---------------------
git merge <nome> (Unindo Brench)
-------------**************************______________________________
Git Stash: É utilizado para salvar temporariamente mudanças que você ainda não quer commitar, mas também não quer perder. Ele guarda as alterações locais (não commitadas) em uma área temporária, permitindo que você volte a um estado "limpo" da branch ou troque de branch sem perder o que você está fazendo.
git stash [Recomeçar jogando na "Lixeira" podendo recuperar depois]

git stash list [Traz todos] 
git stash apply <nº> [Recupera a solução jogada no 'LIXO']
git stash show -p <nº> [Mostra as alterações]

git stash clear

git stash drop stash@{0}

git tag -a <nome> -m <msg> [CheckPoint de uma branch]

git tag show <nome>
git tag checkout <nome>
//////////////////////////Compartilhamento e atualização//////////////////////
-Encontra branches
        git fetch -a (baixa as últimas atualizações (commits, branches, e tags) de um repositório remoto, mas não altera seu histórico local )

            Exemplo:
            Depois de executar git fetch -a, você pode usar comandos como:

            °git branch -r para ver todas as branches remotas.
            °git merge origin/<branch> para mesclar uma branch remota específica na sua branch atual.
            °git tag para listar todas as tags, incluindo as novas que foram baixadas.

-- Atualizar código (Git fetch + git pull)

--Git remote (Modificar a URL do repositorio) remore a origin == URL e parear com um novo servidor
 <Git remote RM origin ---> Remove a URL> <ADDA: >  git remote add <name> <url>
    (git remote add origin https://github.com/luciomotta/Curso-GIT.git)

____________________________________ SubMódulo ______________________________________

git submodulo
        git submodule add <URL rep Clone> submodulo(Nome)
    Ter outro peojto externo 

    Com o --set-upstream, você indica explicitamente para o Git qual branch remota deve ser o destino padrão para git push e git pull a partir de então.
Quando você quer configurar automaticamente o tracking:

Quando você usa git push --set-upstream, o Git configura automaticamente o "tracking" entre a sua branch local e a branch remota, o que significa que nas próximas vezes você pode simplesmente usar git push ou git pull sem precisar especificar o nome da branch.


----------------------------Análises de Expensão ---------------------------------------

git show (INF do branch atual .... log bem detalhado)
    -Pode ser usado em uma tag

git diff (ver diferença de arquivo ou branch)

git shortlog (Resumo interesante  de toda branch)


---------------------------- Administração de Repositorio ---------------------------------------
Git clean (Iram limpar os arq que não serão Trackeados)
    Trackeados (Aqueles que não foram dado o git add;)

